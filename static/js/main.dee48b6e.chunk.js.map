{"version":3,"sources":["index.js"],"names":["dx","dy","Game","state","height","width","mines","_this$state","this","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","className","Board","React","Component","Cell","value","props","isRevealed","isMine","neighbour","isFlagged","_this$props","onClick","cMenu","onContextMenu","getValue","boardData","_this2","initBoardData","mineCount","gameStatus","renderBoard","data","_this3","map","datarow","items","dataitem","key","x","length","y","revealCell","e","flagCell","style","display","createEmptyArray","plantMines","getNeighbours","i","push","j","isEmpty","minesPlanted","Math","floor","random","nx","ny","k","setState","revealBoard","alert","updatedData","checkWin","getFlags","preventDefault","flags","ReactDOM","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.dee48b6e.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport PropTypes from 'prop-types';\r\nimport './style.css';\r\n\r\nconst dx = [1, 0, -1, 0, 1, 1, -1, -1];\r\nconst dy = [0, 1, 0, -1, 1, -1, 1, -1];\r\n\r\nclass Game extends React.Component {\r\n    state = {\r\n        height: 8,\r\n        width: 8,\r\n        mines: 8,\r\n    };\r\n\r\n    render() {\r\n        const { height, width, mines } = this.state;\r\n        return (\r\n            <div className=\"game\">\r\n                <Board height={height} width={width} mines={mines} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Cell extends React.Component {\r\n    getValue() {\r\n        const { value } = this.props;\r\n        if (!value.isRevealed) {\r\n            return value.isFlagged ? \"ðŸš©\" : null;\r\n        }\r\n        if (value.isMine) {\r\n            return \"ðŸ’£\";\r\n        }\r\n        if (value.neighbour === 0) {\r\n            return null;\r\n        }\r\n        return value.neighbour;\r\n    }\r\n\r\n    render() {\r\n        const { value, onClick, cMenu } = this.props;\r\n        let className =\r\n            \"cell\" +\r\n            (value.isRevealed ? \"\" : \" hidden\") +\r\n            (value.isMine ? \" is-mine\" : \"\") +\r\n            (value.isFlagged ? \" is-flag\" : \"\");\r\n        return (\r\n            <div\r\n                onClick={onClick}\r\n                className={className}\r\n                onContextMenu={cMenu}\r\n            >\r\n                {this.getValue()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Board extends React.Component {\r\n    state = {\r\n        boardData: this.initBoardData(this.props.height, this.props.width, this.props.mines),\r\n        mineCount: this.props.mines,\r\n        gameStatus: 'Ongoing',\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"board\">\r\n                <div className=\"game-info\">\r\n                    <span className=\"info\">\r\n                        <h3> {this.state.gameStatus} </h3>\r\n                        <h4> Mines left: {this.state.mineCount} </h4>\r\n                    </span>\r\n                    <br />\r\n                    <span className=\"info\">\r\n                        {this.gameStatus}\r\n                    </span>\r\n                </div>\r\n                {this.renderBoard(this.state.boardData)}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderBoard(data) {\r\n        return data.map((datarow) => {\r\n            let items = datarow.map((dataitem) => {\r\n                return (\r\n                    <div key={dataitem.x * datarow.length + dataitem.y} className = \"cellContainer\">\r\n                        <Cell\r\n                            value={dataitem}\r\n                            onClick = {() => {this.revealCell(dataitem.x, dataitem.y)}}\r\n                            cMenu = {(e) => {this.flagCell(e, dataitem.x, dataitem.y)}}\r\n                        />\r\n                        {(datarow[datarow.length - 1] === dataitem) ? <div className=\"clear\"> </div> : \"\"}\r\n                    </div>\r\n                );\r\n            })\r\n            return (\r\n                <div style={{ display: 'flex' }}>\r\n                    {items}\r\n                </div>\r\n            );\r\n        });\r\n    }\r\n\r\n    initBoardData(height, width, mines) {\r\n        let data = this.createEmptyArray(height, width);\r\n        data = this.plantMines(data, height, width, mines);\r\n        data = this.getNeighbours(data, height, width);\r\n        return data;\r\n    }\r\n\r\n    createEmptyArray(height, width) {\r\n        let data = [];\r\n        for (let i = 0; i < height; i++) {\r\n            data.push([]);\r\n            for (let j = 0; j < width; j++) {\r\n                data[i][j] = {\r\n                    x: i,\r\n                    y: j,\r\n                    isMine: false,\r\n                    neighbour: 0,\r\n                    isRevealed: false,\r\n                    isEmpty: false,\r\n                    isFlagged: false,\r\n                };\r\n            }\r\n        }\r\n        return data;\r\n    }\r\n\r\n    plantMines(data, height, width, mines) {\r\n        let x, y, minesPlanted = 0;\r\n\r\n        while (minesPlanted < mines) {\r\n            x = Math.floor(Math.random() * height);\r\n            y = Math.floor(Math.random() * width);\r\n\r\n            if (!data[x][y].isMine) {\r\n                data[x][y].isMine = true;\r\n                minesPlanted++;\r\n            }\r\n        }\r\n\r\n        return data;\r\n    }\r\n\r\n    getNeighbours(data, height, width) {\r\n        for (let i = 0; i < height; i++) {\r\n            for (let j = 0; j < width; j++) {\r\n                if (!data[i][j].isMine) {\r\n                    let nx, ny = 0;\r\n                    for (let k = 0; k < 8; k++) {\r\n                        nx = i + dx[k];\r\n                        ny = j + dy[k];\r\n\r\n                        if (0 <= nx && nx < height && 0 <= ny && ny < width && data[nx][ny].isMine) {\r\n                            data[i][j].neighbour++;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return data;\r\n    }\r\n\r\n    revealCell(x, y) {\r\n        if(x < 0 || x >= this.props.height || y < 0 || y >= this.props.width ) return null;\r\n        if (this.state.boardData[x][y].isRevealed || this.state.boardData[x][y].isFlagged) return null;\r\n\r\n        if (this.state.boardData[x][y].isMine) {\r\n            this.setState({ gameStatus: 'You Lose' });\r\n            this.revealBoard();\r\n            alert('You Lose');\r\n            return null;\r\n        }\r\n\r\n        let updatedData = this.state.boardData;\r\n        updatedData[x][y].isFlagged = false;\r\n        updatedData[x][y].isRevealed = true;\r\n\r\n        if (updatedData[x][y].neighbour === 0) {\r\n            for(let i = 0; i < 8; i++) {\r\n                this.revealCell(x + dx[i], y + dy[i]);\r\n            }\r\n        }\r\n\r\n        if (this.checkWin(updatedData)) {\r\n            this.setState({ mineCount: 0, gameStatus: 'You Win' });\r\n            this.revealBoard();\r\n            alert(\"You Win\");\r\n        }\r\n\r\n        this.setState({\r\n            boardData: updatedData,\r\n            mineCount: this.props.mines - this.getFlags(updatedData),\r\n        });\r\n    }\r\n\r\n    flagCell(e, x, y) {\r\n        e.preventDefault();\r\n        if(x < 0 || x >= this.props.height || y < 0 || y >= this.props.width ) return null;\r\n        if (this.state.boardData[x][y].isRevealed) return null;\r\n\r\n        let updatedData = this.state.boardData;\r\n        updatedData[x][y].isFlagged = !updatedData[x][y].isFlagged;\r\n\r\n        this.setState({\r\n            boardData: updatedData,\r\n            mineCount: this.props.mines - this.getFlags(updatedData),\r\n        });\r\n    }\r\n\r\n    revealBoard() {\r\n        for(let i = 0; i < this.props.height; i++) {\r\n            for(let j = 0; j < this.props.width; j++) {\r\n                let updatedData = this.state.boardData;\r\n                updatedData[i][j].isFlagged = false;\r\n                updatedData[i][j].isRevealed = true;\r\n\r\n                this.setState({\r\n                    boardData: updatedData,\r\n                    mineCount: this.props.mines - this.getFlags(updatedData),\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    checkWin(data) {\r\n        for(let i = 0; i < this.props.height; i++) {\r\n            for(let j = 0; j < this.props.width; j++) {\r\n                if(!data[i][j].isMine && (!data[i][j].isRevealed || data[i][j].isFlagged))\r\n                    return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    getFlags(data) {\r\n        let flags = 0;\r\n        for(let i = 0; i < this.props.height; i++) {\r\n            for(let j = 0; j < this.props.width; j++) {\r\n                if(data[i][j].isFlagged)\r\n                    flags++;\r\n            }\r\n        }\r\n        return flags;\r\n    }\r\n}\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\r\nroot.render(< Game / >);"],"sourceRoot":""}